//go:build linux && cgo && !agent

package cluster

// The code below was generated by lxd-generate - DO NOT EDIT!

import (
	"context"
	"database/sql"
	"fmt"

	"github.com/canonical/lxd/lxd/db/query"
	"github.com/canonical/lxd/shared/api"
)

var _ = api.ServerEnvironment{}

var groupCertificateObjects = RegisterStmt(`
SELECT certificates_groups.certificate_id, certificates_groups.group_id
  FROM certificates_groups
  ORDER BY certificates_groups.group_id
`)

var groupCertificateObjectsByGroupID = RegisterStmt(`
SELECT certificates_groups.certificate_id, certificates_groups.group_id
  FROM certificates_groups
  WHERE ( certificates_groups.group_id = ? )
  ORDER BY certificates_groups.group_id
`)

var groupCertificateCreate = RegisterStmt(`
INSERT INTO certificates_groups (certificate_id, group_id)
  VALUES (?, ?)
`)

var groupCertificateDeleteByGroupID = RegisterStmt(`
DELETE FROM certificates_groups WHERE group_id = ?
`)

// groupCertificateColumns returns a string of column names to be used with a SELECT statement for the entity.
// Use this function when building statements to retrieve database entries matching the GroupCertificate entity.
func groupCertificateColumns() string {
	return "groups_certificates.certificate_id, groups_certificates.group_id"
}

// getGroupCertificates can be used to run handwritten sql.Stmts to return a slice of objects.
func getGroupCertificates(ctx context.Context, stmt *sql.Stmt, args ...any) ([]GroupCertificate, error) {
	objects := make([]GroupCertificate, 0)

	dest := func(scan func(dest ...any) error) error {
		g := GroupCertificate{}
		err := scan(&g.CertificateID, &g.GroupID)
		if err != nil {
			return err
		}

		objects = append(objects, g)

		return nil
	}

	err := query.SelectObjects(ctx, stmt, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"groups_certificates\" table: %w", err)
	}

	return objects, nil
}

// getGroupCertificatesRaw can be used to run handwritten query strings to return a slice of objects.
func getGroupCertificatesRaw(ctx context.Context, tx *sql.Tx, sql string, args ...any) ([]GroupCertificate, error) {
	objects := make([]GroupCertificate, 0)

	dest := func(scan func(dest ...any) error) error {
		g := GroupCertificate{}
		err := scan(&g.CertificateID, &g.GroupID)
		if err != nil {
			return err
		}

		objects = append(objects, g)

		return nil
	}

	err := query.Scan(ctx, tx, sql, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"groups_certificates\" table: %w", err)
	}

	return objects, nil
}

// GetGroupCertificates returns all available Certificates for the Group.
// generator: group_certificate GetMany
func GetGroupCertificates(ctx context.Context, tx *sql.Tx, groupID int) ([]Certificate, error) {
	var err error

	// Result slice.
	objects := make([]GroupCertificate, 0)

	sqlStmt, err := Stmt(tx, groupCertificateObjectsByGroupID)
	if err != nil {
		return nil, fmt.Errorf("Failed to get \"groupCertificateObjectsByGroupID\" prepared statement: %w", err)
	}

	args := []any{groupID}

	// Select.
	objects, err = getGroupCertificates(ctx, sqlStmt, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"groups_certificates\" table: %w", err)
	}

	result := make([]Certificate, len(objects))
	for i, object := range objects {
		certificate, err := GetCertificates(ctx, tx, CertificateFilter{ID: &object.CertificateID})
		if err != nil {
			return nil, err
		}

		result[i] = certificate[0]
	}

	return result, nil
}

// DeleteGroupCertificates deletes the group_certificate matching the given key parameters.
// generator: group_certificate DeleteMany
func DeleteGroupCertificates(ctx context.Context, tx *sql.Tx, groupID int) error {
	stmt, err := Stmt(tx, groupCertificateDeleteByGroupID)
	if err != nil {
		return fmt.Errorf("Failed to get \"groupCertificateDeleteByGroupID\" prepared statement: %w", err)
	}

	result, err := stmt.Exec(int(groupID))
	if err != nil {
		return fmt.Errorf("Delete \"groups_certificates\" entry failed: %w", err)
	}

	_, err = result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	return nil
}

// CreateGroupCertificates adds a new group_certificate to the database.
// generator: group_certificate Create
func CreateGroupCertificates(ctx context.Context, tx *sql.Tx, objects []GroupCertificate) error {
	for _, object := range objects {
		args := make([]any, 2)

		// Populate the statement arguments.
		args[0] = object.CertificateID
		args[1] = object.GroupID

		// Prepared statement to use.
		stmt, err := Stmt(tx, groupCertificateCreate)
		if err != nil {
			return fmt.Errorf("Failed to get \"groupCertificateCreate\" prepared statement: %w", err)
		}

		// Execute the statement.
		_, err = stmt.Exec(args...)
		if err != nil {
			return fmt.Errorf("Failed to create \"groups_certificates\" entry: %w", err)
		}

	}

	return nil
}

// UpdateGroupCertificates updates the group_certificate matching the given key parameters.
// generator: group_certificate Update
func UpdateGroupCertificates(ctx context.Context, tx *sql.Tx, groupID int, certificateFingerprints []string) error {
	// Delete current entry.
	err := DeleteGroupCertificates(ctx, tx, groupID)
	if err != nil {
		return err
	}

	// Get new entry IDs.
	groupCertificates := make([]GroupCertificate, 0, len(certificateFingerprints))
	for _, entry := range certificateFingerprints {
		refID, err := GetCertificateID(ctx, tx, entry)
		if err != nil {
			return err
		}

		groupCertificates = append(groupCertificates, GroupCertificate{GroupID: groupID, CertificateID: int(refID)})
	}

	err = CreateGroupCertificates(ctx, tx, groupCertificates)
	if err != nil {
		return err
	}

	return nil
}
