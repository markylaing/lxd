//go:build linux && cgo && !agent

package cluster

// The code below was generated by lxd-generate - DO NOT EDIT!

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"net/http"
	"strings"

	"github.com/canonical/lxd/lxd/db/query"
	"github.com/canonical/lxd/shared/api"
)

var _ = api.ServerEnvironment{}

var groupObjects = RegisterStmt(`
SELECT groups.id, groups.name, groups.description
  FROM groups
  ORDER BY groups.name
`)

var groupObjectsByID = RegisterStmt(`
SELECT groups.id, groups.name, groups.description
  FROM groups
  WHERE ( groups.id = ? )
  ORDER BY groups.name
`)

var groupObjectsByName = RegisterStmt(`
SELECT groups.id, groups.name, groups.description
  FROM groups
  WHERE ( groups.name = ? )
  ORDER BY groups.name
`)

var groupID = RegisterStmt(`
SELECT groups.id FROM groups
  WHERE groups.name = ?
`)

var groupCreate = RegisterStmt(`
INSERT INTO groups (name, description)
  VALUES (?, ?)
`)

var groupDeleteByName = RegisterStmt(`
DELETE FROM groups WHERE name = ?
`)

var groupUpdate = RegisterStmt(`
UPDATE groups
  SET name = ?, description = ?
 WHERE id = ?
`)

// groupColumns returns a string of column names to be used with a SELECT statement for the entity.
// Use this function when building statements to retrieve database entries matching the Group entity.
func groupColumns() string {
	return "groups.id, groups.name, groups.description"
}

// getGroups can be used to run handwritten sql.Stmts to return a slice of objects.
func getGroups(ctx context.Context, stmt *sql.Stmt, args ...any) ([]Group, error) {
	objects := make([]Group, 0)

	dest := func(scan func(dest ...any) error) error {
		g := Group{}
		err := scan(&g.ID, &g.Name, &g.Description)
		if err != nil {
			return err
		}

		objects = append(objects, g)

		return nil
	}

	err := query.SelectObjects(ctx, stmt, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"groups\" table: %w", err)
	}

	return objects, nil
}

// getGroupsRaw can be used to run handwritten query strings to return a slice of objects.
func getGroupsRaw(ctx context.Context, tx *sql.Tx, sql string, args ...any) ([]Group, error) {
	objects := make([]Group, 0)

	dest := func(scan func(dest ...any) error) error {
		g := Group{}
		err := scan(&g.ID, &g.Name, &g.Description)
		if err != nil {
			return err
		}

		objects = append(objects, g)

		return nil
	}

	err := query.Scan(ctx, tx, sql, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"groups\" table: %w", err)
	}

	return objects, nil
}

// GetGroups returns all available groups.
// generator: group GetMany
func GetGroups(ctx context.Context, tx *sql.Tx, filters ...GroupFilter) ([]Group, error) {
	var err error

	// Result slice.
	objects := make([]Group, 0)

	// Pick the prepared statement and arguments to use based on active criteria.
	var sqlStmt *sql.Stmt
	args := []any{}
	queryParts := [2]string{}

	if len(filters) == 0 {
		sqlStmt, err = Stmt(tx, groupObjects)
		if err != nil {
			return nil, fmt.Errorf("Failed to get \"groupObjects\" prepared statement: %w", err)
		}
	}

	for i, filter := range filters {
		if filter.Name != nil && filter.ID == nil {
			args = append(args, []any{filter.Name}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(tx, groupObjectsByName)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"groupObjectsByName\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(groupObjectsByName)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"groupObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.ID != nil && filter.Name == nil {
			args = append(args, []any{filter.ID}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(tx, groupObjectsByID)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"groupObjectsByID\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(groupObjectsByID)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"groupObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.ID == nil && filter.Name == nil {
			return nil, fmt.Errorf("Cannot filter on empty GroupFilter")
		} else {
			return nil, fmt.Errorf("No statement exists for the given Filter")
		}
	}

	// Select.
	if sqlStmt != nil {
		objects, err = getGroups(ctx, sqlStmt, args...)
	} else {
		queryStr := strings.Join(queryParts[:], "ORDER BY")
		objects, err = getGroupsRaw(ctx, tx, queryStr, args...)
	}

	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"groups\" table: %w", err)
	}

	return objects, nil
}

// GetGroup returns the group with the given key.
// generator: group GetOne
func GetGroup(ctx context.Context, tx *sql.Tx, name string) (*Group, error) {
	filter := GroupFilter{}
	filter.Name = &name

	objects, err := GetGroups(ctx, tx, filter)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"groups\" table: %w", err)
	}

	switch len(objects) {
	case 0:
		return nil, api.StatusErrorf(http.StatusNotFound, "Group not found")
	case 1:
		return &objects[0], nil
	default:
		return nil, fmt.Errorf("More than one \"groups\" entry matches")
	}
}

// GetGroupID return the ID of the group with the given key.
// generator: group ID
func GetGroupID(ctx context.Context, tx *sql.Tx, name string) (int64, error) {
	stmt, err := Stmt(tx, groupID)
	if err != nil {
		return -1, fmt.Errorf("Failed to get \"groupID\" prepared statement: %w", err)
	}

	row := stmt.QueryRowContext(ctx, name)
	var id int64
	err = row.Scan(&id)
	if errors.Is(err, sql.ErrNoRows) {
		return -1, api.StatusErrorf(http.StatusNotFound, "Group not found")
	}

	if err != nil {
		return -1, fmt.Errorf("Failed to get \"groups\" ID: %w", err)
	}

	return id, nil
}

// GroupExists checks if a group with the given key exists.
// generator: group Exists
func GroupExists(ctx context.Context, tx *sql.Tx, name string) (bool, error) {
	_, err := GetGroupID(ctx, tx, name)
	if err != nil {
		if api.StatusErrorCheck(err, http.StatusNotFound) {
			return false, nil
		}

		return false, err
	}

	return true, nil
}

// CreateGroup adds a new group to the database.
// generator: group Create
func CreateGroup(ctx context.Context, tx *sql.Tx, object Group) (int64, error) {
	// Check if a group with the same key exists.
	exists, err := GroupExists(ctx, tx, object.Name)
	if err != nil {
		return -1, fmt.Errorf("Failed to check for duplicates: %w", err)
	}

	if exists {
		return -1, api.StatusErrorf(http.StatusConflict, "This \"groups\" entry already exists")
	}

	args := make([]any, 2)

	// Populate the statement arguments.
	args[0] = object.Name
	args[1] = object.Description

	// Prepared statement to use.
	stmt, err := Stmt(tx, groupCreate)
	if err != nil {
		return -1, fmt.Errorf("Failed to get \"groupCreate\" prepared statement: %w", err)
	}

	// Execute the statement.
	result, err := stmt.Exec(args...)
	if err != nil {
		return -1, fmt.Errorf("Failed to create \"groups\" entry: %w", err)
	}

	id, err := result.LastInsertId()
	if err != nil {
		return -1, fmt.Errorf("Failed to fetch \"groups\" entry ID: %w", err)
	}

	return id, nil
}

// DeleteGroup deletes the group matching the given key parameters.
// generator: group DeleteOne-by-Name
func DeleteGroup(ctx context.Context, tx *sql.Tx, name string) error {
	stmt, err := Stmt(tx, groupDeleteByName)
	if err != nil {
		return fmt.Errorf("Failed to get \"groupDeleteByName\" prepared statement: %w", err)
	}

	result, err := stmt.Exec(name)
	if err != nil {
		return fmt.Errorf("Delete \"groups\": %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	if n == 0 {
		return api.StatusErrorf(http.StatusNotFound, "Group not found")
	} else if n > 1 {
		return fmt.Errorf("Query deleted %d Group rows instead of 1", n)
	}

	return nil
}

// UpdateGroup updates the group matching the given key parameters.
// generator: group Update
func UpdateGroup(ctx context.Context, tx *sql.Tx, name string, object Group) error {
	id, err := GetGroupID(ctx, tx, name)
	if err != nil {
		return err
	}

	stmt, err := Stmt(tx, groupUpdate)
	if err != nil {
		return fmt.Errorf("Failed to get \"groupUpdate\" prepared statement: %w", err)
	}

	result, err := stmt.Exec(object.Name, object.Description, id)
	if err != nil {
		return fmt.Errorf("Update \"groups\" entry failed: %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	if n != 1 {
		return fmt.Errorf("Query updated %d rows instead of 1", n)
	}

	return nil
}
