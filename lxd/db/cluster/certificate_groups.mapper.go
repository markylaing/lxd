//go:build linux && cgo && !agent

package cluster

// The code below was generated by lxd-generate - DO NOT EDIT!

import (
	"context"
	"database/sql"
	"fmt"

	"github.com/canonical/lxd/lxd/db/query"
	"github.com/canonical/lxd/shared/api"
)

var _ = api.ServerEnvironment{}

var certificateGroupObjects = RegisterStmt(`
SELECT certificates_groups.certificate_id, certificates_groups.group_id
  FROM certificates_groups
  ORDER BY certificates_groups.certificate_id
`)

var certificateGroupObjectsByCertificateID = RegisterStmt(`
SELECT certificates_groups.certificate_id, certificates_groups.group_id
  FROM certificates_groups
  WHERE ( certificates_groups.certificate_id = ? )
  ORDER BY certificates_groups.certificate_id
`)

var certificateGroupCreate = RegisterStmt(`
INSERT INTO certificates_groups (certificate_id, group_id)
  VALUES (?, ?)
`)

var certificateGroupDeleteByCertificateID = RegisterStmt(`
DELETE FROM certificates_groups WHERE certificate_id = ?
`)

// certificateGroupColumns returns a string of column names to be used with a SELECT statement for the entity.
// Use this function when building statements to retrieve database entries matching the CertificateGroup entity.
func certificateGroupColumns() string {
	return "certificates_groups.certificate_id, certificates_groups.group_id"
}

// getCertificateGroups can be used to run handwritten sql.Stmts to return a slice of objects.
func getCertificateGroups(ctx context.Context, stmt *sql.Stmt, args ...any) ([]CertificateGroup, error) {
	objects := make([]CertificateGroup, 0)

	dest := func(scan func(dest ...any) error) error {
		c := CertificateGroup{}
		err := scan(&c.CertificateID, &c.GroupID)
		if err != nil {
			return err
		}

		objects = append(objects, c)

		return nil
	}

	err := query.SelectObjects(ctx, stmt, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"certificates_groups\" table: %w", err)
	}

	return objects, nil
}

// getCertificateGroupsRaw can be used to run handwritten query strings to return a slice of objects.
func getCertificateGroupsRaw(ctx context.Context, tx *sql.Tx, sql string, args ...any) ([]CertificateGroup, error) {
	objects := make([]CertificateGroup, 0)

	dest := func(scan func(dest ...any) error) error {
		c := CertificateGroup{}
		err := scan(&c.CertificateID, &c.GroupID)
		if err != nil {
			return err
		}

		objects = append(objects, c)

		return nil
	}

	err := query.Scan(ctx, tx, sql, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"certificates_groups\" table: %w", err)
	}

	return objects, nil
}

// GetCertificateGroups returns all available Groups for the Certificate.
// generator: certificate_group GetMany
func GetCertificateGroups(ctx context.Context, tx *sql.Tx, certificateID int) ([]Group, error) {
	var err error

	// Result slice.
	objects := make([]CertificateGroup, 0)

	sqlStmt, err := Stmt(tx, certificateGroupObjectsByCertificateID)
	if err != nil {
		return nil, fmt.Errorf("Failed to get \"certificateGroupObjectsByCertificateID\" prepared statement: %w", err)
	}

	args := []any{certificateID}

	// Select.
	objects, err = getCertificateGroups(ctx, sqlStmt, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"certificates_groups\" table: %w", err)
	}

	result := make([]Group, len(objects))
	for i, object := range objects {
		group, err := GetGroups(ctx, tx, GroupFilter{ID: &object.GroupID})
		if err != nil {
			return nil, err
		}

		result[i] = group[0]
	}

	return result, nil
}

// DeleteCertificateGroups deletes the certificate_group matching the given key parameters.
// generator: certificate_group DeleteMany
func DeleteCertificateGroups(ctx context.Context, tx *sql.Tx, certificateID int) error {
	stmt, err := Stmt(tx, certificateGroupDeleteByCertificateID)
	if err != nil {
		return fmt.Errorf("Failed to get \"certificateGroupDeleteByCertificateID\" prepared statement: %w", err)
	}

	result, err := stmt.Exec(int(certificateID))
	if err != nil {
		return fmt.Errorf("Delete \"certificates_groups\" entry failed: %w", err)
	}

	_, err = result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	return nil
}

// CreateCertificateGroups adds a new certificate_group to the database.
// generator: certificate_group Create
func CreateCertificateGroups(ctx context.Context, tx *sql.Tx, objects []CertificateGroup) error {
	for _, object := range objects {
		args := make([]any, 2)

		// Populate the statement arguments.
		args[0] = object.CertificateID
		args[1] = object.GroupID

		// Prepared statement to use.
		stmt, err := Stmt(tx, certificateGroupCreate)
		if err != nil {
			return fmt.Errorf("Failed to get \"certificateGroupCreate\" prepared statement: %w", err)
		}

		// Execute the statement.
		_, err = stmt.Exec(args...)
		if err != nil {
			return fmt.Errorf("Failed to create \"certificates_groups\" entry: %w", err)
		}

	}

	return nil
}

// UpdateCertificateGroups updates the certificate_group matching the given key parameters.
// generator: certificate_group Update
func UpdateCertificateGroups(ctx context.Context, tx *sql.Tx, certificateID int, groupNames []string) error {
	// Delete current entry.
	err := DeleteCertificateGroups(ctx, tx, certificateID)
	if err != nil {
		return err
	}

	// Get new entry IDs.
	certificateGroups := make([]CertificateGroup, 0, len(groupNames))
	for _, entry := range groupNames {
		refID, err := GetGroupID(ctx, tx, entry)
		if err != nil {
			return err
		}

		certificateGroups = append(certificateGroups, CertificateGroup{CertificateID: certificateID, GroupID: int(refID)})
	}

	err = CreateCertificateGroups(ctx, tx, certificateGroups)
	if err != nil {
		return err
	}

	return nil
}
