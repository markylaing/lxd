//go:build linux && cgo && !agent

package cluster

// The code below was generated by lxd-generate - DO NOT EDIT!

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/canonical/lxd/lxd/db/query"
	"github.com/canonical/lxd/shared/api"
)

var _ = api.ServerEnvironment{}

var entitlementObjects = RegisterStmt(`
SELECT entitlements.id, entitlements.relation, entitlements.object_type, entitlements.entity_id, entitlements.object_ref
  FROM entitlements
  ORDER BY entitlements.relation, entitlements.object_type, entitlements.object_ref
`)

var entitlementObjectsByID = RegisterStmt(`
SELECT entitlements.id, entitlements.relation, entitlements.object_type, entitlements.entity_id, entitlements.object_ref
  FROM entitlements
  WHERE ( entitlements.id = ? )
  ORDER BY entitlements.relation, entitlements.object_type, entitlements.object_ref
`)

var entitlementObjectsByObjectType = RegisterStmt(`
SELECT entitlements.id, entitlements.relation, entitlements.object_type, entitlements.entity_id, entitlements.object_ref
  FROM entitlements
  WHERE ( entitlements.object_type = ? )
  ORDER BY entitlements.relation, entitlements.object_type, entitlements.object_ref
`)

var entitlementObjectsByObjectTypeAndObjectRef = RegisterStmt(`
SELECT entitlements.id, entitlements.relation, entitlements.object_type, entitlements.entity_id, entitlements.object_ref
  FROM entitlements
  WHERE ( entitlements.object_type = ? AND entitlements.object_ref = ? )
  ORDER BY entitlements.relation, entitlements.object_type, entitlements.object_ref
`)

var entitlementObjectsByObjectTypeAndEntityID = RegisterStmt(`
SELECT entitlements.id, entitlements.relation, entitlements.object_type, entitlements.entity_id, entitlements.object_ref
  FROM entitlements
  WHERE ( entitlements.object_type = ? AND entitlements.entity_id = ? )
  ORDER BY entitlements.relation, entitlements.object_type, entitlements.object_ref
`)

var entitlementObjectsByObjectTypeAndObjectRefAndRelation = RegisterStmt(`
SELECT entitlements.id, entitlements.relation, entitlements.object_type, entitlements.entity_id, entitlements.object_ref
  FROM entitlements
  WHERE ( entitlements.object_type = ? AND entitlements.object_ref = ? AND entitlements.relation = ? )
  ORDER BY entitlements.relation, entitlements.object_type, entitlements.object_ref
`)

var entitlementObjectsByObjectTypeAndEntityIDAndRelation = RegisterStmt(`
SELECT entitlements.id, entitlements.relation, entitlements.object_type, entitlements.entity_id, entitlements.object_ref
  FROM entitlements
  WHERE ( entitlements.object_type = ? AND entitlements.entity_id = ? AND entitlements.relation = ? )
  ORDER BY entitlements.relation, entitlements.object_type, entitlements.object_ref
`)

// entitlementColumns returns a string of column names to be used with a SELECT statement for the entity.
// Use this function when building statements to retrieve database entries matching the Entitlement entity.
func entitlementColumns() string {
	return "entitlements.id, entitlements.relation, entitlements.object_type, entitlements.entity_id, entitlements.object_ref"
}

// getEntitlements can be used to run handwritten sql.Stmts to return a slice of objects.
func getEntitlements(ctx context.Context, stmt *sql.Stmt, args ...any) ([]Entitlement, error) {
	objects := make([]Entitlement, 0)

	dest := func(scan func(dest ...any) error) error {
		e := Entitlement{}
		err := scan(&e.ID, &e.Relation, &e.ObjectType, &e.EntityID, &e.ObjectRef)
		if err != nil {
			return err
		}

		objects = append(objects, e)

		return nil
	}

	err := query.SelectObjects(ctx, stmt, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"entitlements\" table: %w", err)
	}

	return objects, nil
}

// getEntitlementsRaw can be used to run handwritten query strings to return a slice of objects.
func getEntitlementsRaw(ctx context.Context, tx *sql.Tx, sql string, args ...any) ([]Entitlement, error) {
	objects := make([]Entitlement, 0)

	dest := func(scan func(dest ...any) error) error {
		e := Entitlement{}
		err := scan(&e.ID, &e.Relation, &e.ObjectType, &e.EntityID, &e.ObjectRef)
		if err != nil {
			return err
		}

		objects = append(objects, e)

		return nil
	}

	err := query.Scan(ctx, tx, sql, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"entitlements\" table: %w", err)
	}

	return objects, nil
}

// GetEntitlements returns all available entitlements.
// generator: entitlement GetMany
func GetEntitlements(ctx context.Context, tx *sql.Tx, filters ...EntitlementFilter) ([]Entitlement, error) {
	var err error

	// Result slice.
	objects := make([]Entitlement, 0)

	// Pick the prepared statement and arguments to use based on active criteria.
	var sqlStmt *sql.Stmt
	args := []any{}
	queryParts := [2]string{}

	if len(filters) == 0 {
		sqlStmt, err = Stmt(tx, entitlementObjects)
		if err != nil {
			return nil, fmt.Errorf("Failed to get \"entitlementObjects\" prepared statement: %w", err)
		}
	}

	for i, filter := range filters {
		if filter.ObjectType != nil && filter.ObjectRef != nil && filter.Relation != nil && filter.ID == nil && filter.EntityID == nil {
			args = append(args, []any{filter.ObjectType, filter.ObjectRef, filter.Relation}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(tx, entitlementObjectsByObjectTypeAndObjectRefAndRelation)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"entitlementObjectsByObjectTypeAndObjectRefAndRelation\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(entitlementObjectsByObjectTypeAndObjectRefAndRelation)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"entitlementObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.ObjectType != nil && filter.EntityID != nil && filter.Relation != nil && filter.ID == nil && filter.ObjectRef == nil {
			args = append(args, []any{filter.ObjectType, filter.EntityID, filter.Relation}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(tx, entitlementObjectsByObjectTypeAndEntityIDAndRelation)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"entitlementObjectsByObjectTypeAndEntityIDAndRelation\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(entitlementObjectsByObjectTypeAndEntityIDAndRelation)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"entitlementObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.ObjectType != nil && filter.ObjectRef != nil && filter.ID == nil && filter.Relation == nil && filter.EntityID == nil {
			args = append(args, []any{filter.ObjectType, filter.ObjectRef}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(tx, entitlementObjectsByObjectTypeAndObjectRef)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"entitlementObjectsByObjectTypeAndObjectRef\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(entitlementObjectsByObjectTypeAndObjectRef)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"entitlementObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.ObjectType != nil && filter.EntityID != nil && filter.ID == nil && filter.Relation == nil && filter.ObjectRef == nil {
			args = append(args, []any{filter.ObjectType, filter.EntityID}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(tx, entitlementObjectsByObjectTypeAndEntityID)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"entitlementObjectsByObjectTypeAndEntityID\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(entitlementObjectsByObjectTypeAndEntityID)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"entitlementObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.ObjectType != nil && filter.ID == nil && filter.Relation == nil && filter.EntityID == nil && filter.ObjectRef == nil {
			args = append(args, []any{filter.ObjectType}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(tx, entitlementObjectsByObjectType)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"entitlementObjectsByObjectType\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(entitlementObjectsByObjectType)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"entitlementObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.ID != nil && filter.Relation == nil && filter.ObjectType == nil && filter.EntityID == nil && filter.ObjectRef == nil {
			args = append(args, []any{filter.ID}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(tx, entitlementObjectsByID)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"entitlementObjectsByID\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(entitlementObjectsByID)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"entitlementObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.ID == nil && filter.Relation == nil && filter.ObjectType == nil && filter.EntityID == nil && filter.ObjectRef == nil {
			return nil, fmt.Errorf("Cannot filter on empty EntitlementFilter")
		} else {
			return nil, fmt.Errorf("No statement exists for the given Filter")
		}
	}

	// Select.
	if sqlStmt != nil {
		objects, err = getEntitlements(ctx, sqlStmt, args...)
	} else {
		queryStr := strings.Join(queryParts[:], "ORDER BY")
		objects, err = getEntitlementsRaw(ctx, tx, queryStr, args...)
	}

	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"entitlements\" table: %w", err)
	}

	return objects, nil
}
