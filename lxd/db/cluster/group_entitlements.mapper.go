//go:build linux && cgo && !agent

package cluster

// The code below was generated by lxd-generate - DO NOT EDIT!

import (
	"context"
	"database/sql"
	"fmt"

	"github.com/canonical/lxd/lxd/db/query"
	"github.com/canonical/lxd/shared/api"
)

var _ = api.ServerEnvironment{}

var groupEntitlementObjects = RegisterStmt(`
SELECT groups_entitlements.group_id, groups_entitlements.entitlement_id
  FROM groups_entitlements
  ORDER BY groups_entitlements.group_id
`)

var groupEntitlementObjectsByGroupID = RegisterStmt(`
SELECT groups_entitlements.group_id, groups_entitlements.entitlement_id
  FROM groups_entitlements
  WHERE ( groups_entitlements.group_id = ? )
  ORDER BY groups_entitlements.group_id
`)

var groupEntitlementCreate = RegisterStmt(`
INSERT INTO groups_entitlements (group_id, entitlement_id)
  VALUES (?, ?)
`)

var groupEntitlementDeleteByGroupID = RegisterStmt(`
DELETE FROM groups_entitlements WHERE group_id = ?
`)

// groupEntitlementColumns returns a string of column names to be used with a SELECT statement for the entity.
// Use this function when building statements to retrieve database entries matching the GroupEntitlement entity.
func groupEntitlementColumns() string {
	return "groups_entitlements.group_id, groups_entitlements.entitlement_id"
}

// getGroupEntitlements can be used to run handwritten sql.Stmts to return a slice of objects.
func getGroupEntitlements(ctx context.Context, stmt *sql.Stmt, args ...any) ([]GroupEntitlement, error) {
	objects := make([]GroupEntitlement, 0)

	dest := func(scan func(dest ...any) error) error {
		g := GroupEntitlement{}
		err := scan(&g.GroupID, &g.EntitlementID)
		if err != nil {
			return err
		}

		objects = append(objects, g)

		return nil
	}

	err := query.SelectObjects(ctx, stmt, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"groups_entitlements\" table: %w", err)
	}

	return objects, nil
}

// getGroupEntitlementsRaw can be used to run handwritten query strings to return a slice of objects.
func getGroupEntitlementsRaw(ctx context.Context, tx *sql.Tx, sql string, args ...any) ([]GroupEntitlement, error) {
	objects := make([]GroupEntitlement, 0)

	dest := func(scan func(dest ...any) error) error {
		g := GroupEntitlement{}
		err := scan(&g.GroupID, &g.EntitlementID)
		if err != nil {
			return err
		}

		objects = append(objects, g)

		return nil
	}

	err := query.Scan(ctx, tx, sql, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"groups_entitlements\" table: %w", err)
	}

	return objects, nil
}

// GetGroupEntitlements returns all available Entitlements for the Group.
// generator: group_entitlement GetMany
func GetGroupEntitlements(ctx context.Context, tx *sql.Tx, groupID int) ([]Entitlement, error) {
	var err error

	// Result slice.
	objects := make([]GroupEntitlement, 0)

	sqlStmt, err := Stmt(tx, groupEntitlementObjectsByGroupID)
	if err != nil {
		return nil, fmt.Errorf("Failed to get \"groupEntitlementObjectsByGroupID\" prepared statement: %w", err)
	}

	args := []any{groupID}

	// Select.
	objects, err = getGroupEntitlements(ctx, sqlStmt, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"groups_entitlements\" table: %w", err)
	}

	result := make([]Entitlement, len(objects))
	for i, object := range objects {
		entitlement, err := GetEntitlements(ctx, tx, EntitlementFilter{ID: &object.EntitlementID})
		if err != nil {
			return nil, err
		}

		result[i] = entitlement[0]
	}

	return result, nil
}

// DeleteGroupEntitlements deletes the group_entitlement matching the given key parameters.
// generator: group_entitlement DeleteMany
func DeleteGroupEntitlements(ctx context.Context, tx *sql.Tx, groupID int) error {
	stmt, err := Stmt(tx, groupEntitlementDeleteByGroupID)
	if err != nil {
		return fmt.Errorf("Failed to get \"groupEntitlementDeleteByGroupID\" prepared statement: %w", err)
	}

	result, err := stmt.Exec(int(groupID))
	if err != nil {
		return fmt.Errorf("Delete \"groups_entitlements\" entry failed: %w", err)
	}

	_, err = result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	return nil
}

// CreateGroupEntitlements adds a new group_entitlement to the database.
// generator: group_entitlement Create
func CreateGroupEntitlements(ctx context.Context, tx *sql.Tx, objects []GroupEntitlement) error {
	for _, object := range objects {
		args := make([]any, 2)

		// Populate the statement arguments.
		args[0] = object.GroupID
		args[1] = object.EntitlementID

		// Prepared statement to use.
		stmt, err := Stmt(tx, groupEntitlementCreate)
		if err != nil {
			return fmt.Errorf("Failed to get \"groupEntitlementCreate\" prepared statement: %w", err)
		}

		// Execute the statement.
		_, err = stmt.Exec(args...)
		if err != nil {
			return fmt.Errorf("Failed to create \"groups_entitlements\" entry: %w", err)
		}

	}

	return nil
}
